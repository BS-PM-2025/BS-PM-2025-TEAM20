pipeline {
    agent any

    environment {
        PYTHONUNBUFFERED = '1'
        DJANGO_SETTINGS_MODULE = 'djangoProject11.settings'
        PYTHONPATH = "${env.WORKSPACE}"
        CI = 'true'
        OUTPUT_DIR = 'C:\\Users\\נגם\\OneDrive\\שולחן העבודה\\CA\\djangoProject11\\test_results'
    }

    stages {
        stage('Install Dependencies') {
            steps {
                echo '📦 Installing dependencies...'
                sh 'pip install -r requirements.txt || pip install Django pytest pytest-django'
            }
        }

        stage('Prepare Database') {
            steps {
                echo '🗄️ Preparing database...'
                sh 'python3 manage.py makemigrations'
                sh 'python3 manage.py migrate'
            }
        }

        stage('Run Unit + Integration Tests') {
            steps {
                echo '🧪 Running Django tests with coverage...'
                sh '''
                    mkdir -p "$OUTPUT_DIR" || mkdir "$OUTPUT_DIR"
                    python3 -m pytest accounts/tests.py --ds=djangoProject11.settings --junitxml="$OUTPUT_DIR/test-results.xml" || true
                '''
            }
        }

        stage('Calculate Defect Density') {
            steps {
                echo '📊 Calculating Defect Density...'
                sh '''
                    FAILURES=$(grep -o 'failures="\\?[0-9]\\+"' "$OUTPUT_DIR/test-results.xml" | grep -o '[0-9]')
                    LOC=$(find accounts -name "*.py" ! -path "*tests*" ! -path "*migrations*" ! -path "*venv*" | xargs wc -l | tail -n1 | awk '{print $1}')
                    if [ "$LOC" -gt 0 ]; then
                        DEFECT_DENSITY=$(echo "scale=2; $FAILURES / $LOC * 1000" | bc)
                    else
                        DEFECT_DENSITY=0
                    fi
                    echo "📈 Defect Density: $DEFECT_DENSITY defects per 1000 LOC" | tee "$OUTPUT_DIR/defect_density.txt"
                '''
            }
        }

        stage('Code Coverage') {
            steps {
                echo '📊 Measuring code coverage with pytest-cov...'
                sh '''
                    pip install pytest-cov || true
                    python3 -m pytest accounts/tests.py --ds=djangoProject11.settings --cov=accounts --cov-report=term-missing --cov-report=xml:"$OUTPUT_DIR/coverage.xml" || true
                '''
            }
        }

        stage('Static Code Check: pylint') {
            steps {
                echo '📎 Running pylint...'
                sh '''
                    pip install pylint || true
                    export PATH=$PATH:$HOME/.local/bin
                    pylint accounts --exit-zero | tee "$OUTPUT_DIR/pylint_report.txt" || true
                '''
            }
        }
    }

    post {
        always {
            echo '📊 Archiving test results...'
            junit 'test_results/test-results.xml'
        }
    }
}
