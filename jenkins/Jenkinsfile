pipeline {
    agent any

    environment {
        DB_NAME = 'test_db'
        DB_USER = 'jenkins_user'
        DB_PASS = 'jenkins_pass'
        DB_HOST = 'localhost'
        DB_PORT = '1433'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code from Git...'
                checkout scm
            }
        }

  stage('Build') {
    steps {
        echo 'Building the project...'
        sh 'python3 -m pip install --upgrade pip'
        sh 'python3 -m pip install -r requirements.txt'
        // התקנת תלויות נוספות של בדיקות
        sh 'python3 -m pip install coverage pytest pytest-django pytest-cov'
    }
}

        stage('Test') {
            steps {
                echo 'Running Django unit and integration tests with coverage and junit xml...'
                // הפעלת pytest עם כיסוי קוד ויצירת דוח JUnit XML
                sh '''
                    pytest --cov=. --cov-report=xml --junitxml=results.xml
                '''
            }
            post {
                always {
                    // העלאת דוחות JUnit ל-Jenkins להצגה בדשבורד
                    junit 'results.xml'
                    // ניתן להוסיף גם דוחות כיסוי דרך פלאגין חיצוני כמו Cobertura
                    publishCoverage adapters: [coberturaAdapter('coverage.xml')]
                }
            }
        }

        stage('Dedup') {
            steps {
                echo 'Running deduplication step...'
                // לדוגמה:
                // sh 'python3 dedup_script.py'
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying the application...'
                // לדוגמה:
                // sh './deploy_script.sh'
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Build and tests succeeded.'
        }
        failure {
            echo 'Build or tests failed.'
        }
    }
}
