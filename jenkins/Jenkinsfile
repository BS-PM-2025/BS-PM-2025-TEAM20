pipeline {
    agent any

    environment {
        DB_NAME = 'test_db'
        DB_USER = 'jenkins_user'
        DB_PASS = 'jenkins_pass'
        DB_HOST = 'localhost'
        DB_PORT = '1433'
        VENV_DIR = 'venv'  // תיקיית הסביבה הווירטואלית
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code from Git...'
                checkout scm
            }
        }

        stage('Setup Virtualenv and Install Dependencies') {
            steps {
                echo 'Setting up Python virtual environment and installing dependencies...'
                // יצירת סביבה וירטואלית
                sh 'python3 -m venv ${VENV_DIR}'
                // הפעלת הסביבה הווירטואלית והתקנת חבילות
                sh """
                   source ${VENV_DIR}/bin/activate
                   pip install --upgrade pip
                   pip install -r requirements.txt
                   pip install coverage junit-xml
                   """
            }
        }

        stage('Test') {
            steps {
                echo 'Running Django unit and integration tests with coverage metrics...'

                // הפעלת הבדיקות עם סביבה וירטואלית ו־coverage
                sh """
                   source ${VENV_DIR}/bin/activate
                   python -m coverage run --source=. manage.py test
                   python -m coverage report
                   python -m coverage xml
                   python -m coverage html
                """

                // ניסיון לפרסם דוחות JUnit (אם קיימים)
                script {
                    try {
                        junit 'reports/junit/*.xml'
                    } catch (err) {
                        echo "No JUnit XML reports found."
                    }
                }

                // פרסום דוח כיסוי קוד ל-Jenkins (דורש התקנת Cobertura plugin)
                publishCoverage adapters: [
                    coberturaAdapter('coverage.xml')
                ], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')

                // שמירת דוח HTML של coverage כתוצר (artifact)
                archiveArtifacts artifacts: 'htmlcov/**', allowEmptyArchive: true
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying the application...'
                // שים כאן את פקודות הפריסה שלך, לדוגמה:
                // sh './deploy_script.sh'
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Build and tests succeeded.'
        }
        failure {
            echo 'Build or tests failed.'
        }
    }
}
