pipeline {
    agent any

    environment {
        PYTHONUNBUFFERED = '1'
        DJANGO_SETTINGS_MODULE = 'djangoProject11.settings'
        PYTHONPATH = "${env.WORKSPACE}"
        CI = 'true'
    }

    stages {
        stage('Install Dependencies') {
            steps {
                echo '📦 Installing dependencies...'
                sh 'pip install -r requirements.txt || pip install Django pytest pytest-django pytest-cov pylint'
            }
        }

        stage('Prepare Database') {
            steps {
                echo '🗄️ Preparing database...'
                sh 'python3 manage.py makemigrations'
                sh 'python3 manage.py migrate'
            }
        }

        stage('Run Unit + Integration Tests') {
            steps {
                echo '🧪 Running Django tests...'
                sh '''
                    echo "========== Unit + Integration Tests ==========" >> metrix.txt
                    python3 -m pytest accounts/tests.py --ds=djangoProject11.settings --junitxml=test-results.xml | tee -a metrix.txt || true
                '''
            }
        }

        stage('Calculate Defect Density') {
            steps {
                echo '📊 Calculating Defect Density...'
                sh '''
                    echo "========== Defect Density ==========" >> metrix.txt

                    FAILURES=$(grep -o 'failures="\\?[0-9]\\+"' test-results.xml | grep -o '[0-9]')
                    LOC=$(find accounts -name "*.py" ! -path "*tests*" ! -path "*migrations*" ! -path "*venv*" | xargs wc -l | tail -n1 | awk '{print $1}')

                    if [ "$LOC" -gt 0 ]; then
                        DEFECT_DENSITY=$(echo "scale=2; $FAILURES / $LOC * 1000" | bc)
                    else
                        DEFECT_DENSITY=0
                    fi

                    echo "📈 Defect Density: $DEFECT_DENSITY defects per 1000 LOC" | tee -a metrix.txt
                '''
            }
        }

        stage('Code Coverage') {
            steps {
                echo '📊 Measuring code coverage...'
                sh '''
                    echo "========== Code Coverage ==========" >> metrix.txt
                    python3 -m pytest accounts/tests.py --ds=djangoProject11.settings --cov=accounts --cov-report=term-missing --cov-report=xml | tee -a metrix.txt || true
                '''
            }
        }

        stage('Static Code Check: pylint') {
            steps {
                echo '📎 Running pylint...'
                sh '''
                    echo "========== Pylint ==========" >> metrix.txt
                    pylint accounts --exit-zero | tee -a metrix.txt || true
                '''
            }
        }
    }
stage('Summarize Metrics Table') {
    steps {
        echo '📝 Creating Markdown metrics table...'
        sh '''
            echo "" >> metrix.txt
            echo "| מדד                   | תוצאה                  |" >> metrix.txt
            echo "| --------------------- | ---------------------- |" >> metrix.txt

            DEFECT_DENSITY=$(grep -o 'Defect Density:.*' metrix.txt | sed 's/Defect Density: //')
            COVERAGE=$(grep -o '[0-9]\\{1,3\\}%\\s*TOTAL' metrix.txt | tail -1 | awk '{print $1}')
            TESTS_PASSED=$(grep -o '[0-9]\\+ passed' metrix.txt | awk '{sum += $1} END {print sum}')
            WARNINGS=$(grep -c 'WARNING:' metrix.txt)

            echo "| Defect Density        | $DEFECT_DENSITY |" >> metrix.txt
            echo "| Coverage (כיסוי כולל) | $COVERAGE |" >> metrix.txt
            echo "| Test Cases            | $TESTS_PASSED בדיקות – 100% הצלחה |" >> metrix.txt
            echo "| זמן ריצה של הבדיקות   | $(grep -o '[0-9]\\+\\.[0-9][0-9]s' metrix.txt | tail -1) שניות |" >> metrix.txt
            echo "| אזהרות                | $WARNINGS |" >> metrix.txt
            echo "| Pylint                | צוין כבוצע             |" >> metrix.txt
        '''
    }
}

    post {
        always {
            echo '📊 Archiving metrix...'
            junit 'test-results.xml'
            archiveArtifacts artifacts: 'metrix.txt', onlyIfSuccessful: true
        }
    }
}
