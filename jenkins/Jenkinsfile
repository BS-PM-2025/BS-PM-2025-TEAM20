pipeline {
    agent any

    environment {
        PYTHONUNBUFFERED = '1'
        DJANGO_SETTINGS_MODULE = 'djangoProject11.settings'
        PYTHONPATH = "${env.WORKSPACE}"
        CI = 'true'

        DEFECT_DENSITY = 'N/A'
        COVERAGE_PERCENT = 'N/A'
    }

    stages {
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing dependencies...'
                sh 'pip install -r requirements.txt || pip install Django pytest pytest-django pytest-cov'
            }
        }

        stage('Prepare Database') {
            steps {
                echo 'üóÑÔ∏è Preparing database...'
                sh 'python3 manage.py makemigrations'
                sh 'python3 manage.py migrate'
            }
        }

        stage('Run Unit + Integration Tests') {
            steps {
                echo 'üß™ Running Django tests with coverage...'
                sh 'python3 -m pytest accounts/tests.py --ds=djangoProject11.settings --junitxml=test-results.xml --cov=accounts --cov-report=xml --cov-report=term || true'
            }
        }

        stage('Calculate Defect Density') {
            steps {
                echo 'üìä Calculating Defect Density...'
                script {
                    def defectDensity = sh(
                        script: '''
                            FAILURES=$(grep -o 'failures="[0-9]\\+"' test-results.xml | grep -o '[0-9]')
                            LOC=$(find accounts -name "*.py" ! -path "*tests*" ! -path "*migrations*" ! -path "*venv*" | xargs wc -l | tail -n1 | awk '{print $1}')
                            if [ "$LOC" -gt 0 ]; then
                                echo "scale=2; $FAILURES / $LOC * 1000" | bc
                            else
                                echo "0"
                            fi
                        ''',
                        returnStdout: true
                    ).trim()
                    env.DEFECT_DENSITY = defectDensity
                    echo "üìà Defect Density: ${defectDensity} defects per 1000 LOC"
                }
            }
        }

        stage('Static Code Check: pylint') {
            steps {
                echo 'üìé Running pylint...'
                sh '''
                    pip install pylint || true
                    export PATH=$PATH:$HOME/.local/bin
                    pylint accounts --exit-zero || true
                '''
            }
        }
    }

    post {
        always {
            echo 'üìä Archiving test results...'
            junit 'test-results.xml'

            script {
                def coveragePercent = sh(
                    script: '''
                        if [ -f coverage.xml ]; then
                            grep "<coverage " coverage.xml | sed -E 's/.*line-rate="([0-9.]+)".*/\\1/'
                        else
                            echo "N/A"
                        fi
                    ''',
                    returnStdout: true
                ).trim()

                env.COVERAGE_PERCENT = coveragePercent
            }

            echo """
+----------------------+-------------------------------+
| Metric               | Value                         |
+----------------------+-------------------------------+
| Defect Density       | ${env.DEFECT_DENSITY} defects / 1000 LOC |
| Code Coverage        | ${env.COVERAGE_PERCENT != "N/A" ? (env.COVERAGE_PERCENT.toFloat()*100).round(2) + "%" : "N/A"}            |
| Pylint Status        | (◊®◊ê◊î ◊§◊ú◊ò pylint ◊ú◊û◊ô◊ì◊¢)         |
+----------------------+-------------------------------+
"""
        }
    }
}
